
	/*##########################TESTES(Querie3)###################################### FUNCIONA
	getchar();
	int i;
	double cont=0;
	int cont2=0;

	DADOS d=querie3(fact,5,"AF1184",1);

	for(i=0;i<3;i++){
		printf("Filial %d: Price-> %f | Quant -> %d\n",i,getDadosP(d)[i],getDadosQ(d)[i]);
		cont+=getDadosP(d)[i];
		cont2+=getDadosQ(d)[i];
	}
	printf("TotalpriceMes -> %f\n",cont );
	printf("TotalquantMes -> %d\n",cont2);
	*/

	/*##########################TESTES(Querie4(TOTAIS e Filiais))###################################### FUNCIONA*/
	getchar();
	int a,i;
	GROUP_PRODUCTS f1;
	//for(i=1;i<4;i++){
		//a=0;
		for(i=1;i<4;i++){
			a=0;	
			f1 = querie4(fact,&a,i);

			//printGP(f1,a);
		printf("%d\n",a);
	}
	//}
	/*##########################TESTES(Querie6)###################################### FUNCIONA
	getchar();
	int i;
	double cont=0;
	int cont2=0;

	DADOS d=querie6(fact,1,12);

	printf("TotalpriceMes -> %f\n",getDadosTP(d));
	printf("TotalquantMes -> %d\n",getDadosTQ(d));
	*/

	/* DESCRIÇÃO DE COMANDOS 
	printf("1. leitura <ficheiro> <ficheiro> <ficheiro>\n");
	printf("2. produtos-letra <letra>\n");
	printf("3. vendas-facturado <mês> <produto> <info>\n"); // INFO = RESULTADO GLOBAL OU POR FILIAL
	printf("4. produtos-nao-vendidos <info>\n"); // INFO = RESULTADO GLOBAL OU POR FILIAL
	printf("5. compras-cliente <cliente>\n");
	printf("6. vendas-meses <mês-inicio> <mês-fim>\n");
	printf("7. clientes-todas-filiais\n");
	printf("8. produtos-filial <produto> <filial>\n");
	printf("9. maiores-compras <cliente> <mês>\n");
	printf("10. mais-vendidos <numero>\n");
	printf("11. maiores-despesas <cliente>\n");
	printf("12. inativos\n");

	token = strtok(buffer,"\r\n");

	token = strtok(buffer," ");
	for(i=0;token!=NULL && i<4;i++){
		switch(i){
			case 0: strcpy(command,token); break;
			case 1: strcpy(arg1,token); break;
			case 2: strcpy(arg2,token); break;
			case 3: strcpy(arg3,token); break;
		}
		token = strtok(NULL," ");
	}

	nArgs = i;


int main(){	

	int i,contador2=0;
	CATALOG_CLIENTS CatClients = initClients();
	CATALOG_PRODUCTS CatProducts = initProducts();
	SALES* Sales = initSales();

	printf("CORRER O PROGRAMA\n");
	getFile(CatClients,CatProducts,Sales);	

	putchar('\n');
	printf("LIMPEZA\n");
	removeCatClients(CatClients);
	removeCatProds(CatProducts);
	for(i=0;i<1000000;i++) if(Sales[i])freeSale(Sales[i]);
	printf("NUMERO DE CLIENTES:%d\n",totalElements(getMY_AVL(CatClients)));
	printf("NUMERO DE PRODUTOS:%d\n",totalElements(getMY_AVL2(CatProducts)));
	for(i=0;i<1000000;i++)
		if(Sales[i]==NULL) 
			contador2++;
	printf("NUMERO DE SALES:%d\n",contador2);

	putchar('\n');
	printf("CORRER NOVAMENTE\n");
	getFile(CatClients,CatProducts,Sales);	

	return 0;
}

TESTAR A GROUP_PRODUCTS POR LETRA
		for(l = 'A';l<='Z';l++){
		GROUP_PRODUCTS a = productsLetter(CatProducts,l);
		for(i=0;i<getGroupProdSize(a);i++)
			printf("%s\n",getProduct(getGroupProd(a)[i]));

	}
##########################QUERIE 5##################################
DADOS_FILIAL df=initDadosFilial();
	for(i=0;i<3;i++)
	    querie5(arrayFiliais[i],df,"Z5000",i);
	
	int j;
	for(i=0;i<3;i++)
		for(j=0;j<12;j++)
			printf("MES-%d filial-%d Q-%d\n",j,i,getDadosI(df,i,j));	

###########################QUERIE 7###################################
getchar();
	GROUP_CLIENTS gc;
	gc=querie7 (arrayFiliais);
	
	for(i=0;i<getGroupClieSp(gc);i++)
		printf("%s\n",getClient(getGroupClie(gc)[i]));
	printf("%d\n",getGroupClieSp(gc));

###########################QUERIE 8###################################
/*getchar();
	GROUP_CLIENTS gcN;
	GROUP_CLIENTS gcP;
	gcN=querie8(arrayFiliais[1],"AF1184",&gcP);
	
	for(i=0;i<getGroupClieSp(gcN);i++)
		printf("%s\n",getClient(getGroupClie(gcN)[i]));
	printf("%d\n",getGroupClieSp(gcN));
	for(i=0;i<getGroupClieSp(gcP);i++)
		printf("%s\n",getClient(getGroupClie(gcP)[i]));
	printf("%d\n",getGroupClieSp(gcP));*/

##########################QUERIE 9###################################
GROUP_PRODUCTS gp;
	gp=querie9(arrayFiliais,"Z5000",4);

	for(i=0;i<getGroupProdSp(gp);i++)
		printf("%s\n",getProduct(getGroupProd(gp)[i]));	

###########################QUERIE 12#################################
int r=querie12Clients(arrayFiliais);
	printf("%d\n",r);

int r=querie12Products(fact);
	printf("%d\n",r);

##########################TESTES######################################
	getchar();
	int i;
	double cont=0;
	int cont2=0;

	DADOS d=querie3(fact,5,"AF1184",1);

	for(i=0;i<3;i++){
		printf("Filial %d: Price-> %f | Quant -> %d\n",i,getDadosP(d)[i],getDadosQ(d)[i]);
		cont+=getDadosP(d)[i];
		cont2+=getDadosQ(d)[i];
	}
	printf("TotalpriceMes -> %f\n",cont );
	printf("TotalquantMes -> %d\n",cont2);
*/

Avl insertINFO(Avl a,STRING line,void* i){
	Avl aux=a;
	int cp;
	while(a){
		if((cp=strcmp(a->code,line)) > 0) a=a->left;
		else if(cp<0) a=a->right;
			else {a->info=i;break;}
	}

	a=aux;
	return a;
}

MY_AVL insertMyAvl(MY_AVL a,char* line,void* info){

	if(a == NULL) a = initMyAvl();
	if(!info)(a->avl) = insert(a->avl,line,info);
	else (a->avl)=insertINFO(a->avl,line,info);
	(a->total)++;
	return a;
}